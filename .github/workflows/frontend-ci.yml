name: Frontend CI/CD

on:
  workflow_dispatch:
  push:
    branches: [ main, frontend-vue ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/frontend-cdn-user
  RUNNAME: cdn_users_v2
  NODE_VERSION: '16.20.0'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    # 多层缓存策略
    - name: Cache node_modules
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.NODE_VERSION }}-
          ${{ runner.os }}-node-
          
    # 缓存构建输出
    - name: Cache build output
      uses: actions/cache@v4
      with:
        path: dist
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-
        
    - name: Install dependencies
      run: |
        # 设置npm配置加速
        npm config set registry https://registry.npmmirror.com/
        npm config set fund false
        npm config set audit false
        npm ci --prefer-offline
      
    - name: Run linting
      run: npm run lint --quiet
      
    - name: Run unit tests
      run: npm run test:unit --if-present
      
    - name: Run build test
      run: |
        export SASS_SILENCE_DEPRECATION_WARNINGS=1
        npm run build:cdn_users
        
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # 增强的缓存策略
        cache-from: |
          type=gha
          type=registry,ref=${{ env.IMAGE_NAME }}:cache
        cache-to: |
          type=gha,mode=max
          type=registry,ref=${{ env.IMAGE_NAME }}:cache,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        
    - name: Generate summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Time**: \`$(date)\`" >> $GITHUB_STEP_SUMMARY